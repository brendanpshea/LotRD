[
{
"question": "What is a Computer?",
"correct": [
"A programmable electronic device that processes data according to instructions",
"A device that can perform arithmetic operations and logical decisions"
],
"incorrect": [
"A device that only stores information",
"A machine that only performs calculations",
"A system that only displays images and text"
],
"hint": "Think about the fundamental capabilities that define a computer beyond just calculations."
},
{
"question": "Which of the following are considered input devices?",
"correct": [
"Keyboard",
"Mouse",
"Microphone"
],
"incorrect": [
"Printer",
"Speaker"
],
"hint": "Input devices allow users to send data into a computer system."
},
{
"question": "Which of the following are output devices?",
"correct": [
"Monitor",
"Printer",
"Speaker",
"Projector"
],
"incorrect": [
"Scanner"
],
"hint": "Output devices present processed data from the computer to the user."
},
{
"question": "In the IPO (Input-Process-Output) Model, what statements are correct?",
"correct": [
"The model describes the fundamental sequence of operations in computing",
"Processing transforms input data into meaningful output"
],
"incorrect": [
"Input always comes from hardware devices",
"Output is always displayed on a screen",
"Processing can only be mathematical operations"
],
"hint": "Consider the broader concept of how data flows through any computing system."
},
{
"question": "Regarding generations of programming languages (1 to 4), which statements are true?",
"correct": [
"First-generation languages are machine languages consisting of binary code",
"Second-generation languages are assembly languages using symbolic code",
"Third-generation languages like C, FORTRAN, and COBOL are high-level and closer to human language"
],
"incorrect": [
"Fourth-generation languages are lower-level than third-generation languages",
"Assembly language is considered a first-generation language"
],
"hint": "Consider how programming languages evolved from machine-oriented to more human-oriented."
},
{
"question": "What are general features of Java?",
"correct": [
"Object-oriented programming language",
"Platform independent (write once, run anywhere)",
"Automatic memory management through garbage collection",
"Strong type checking at compile time"
],
"incorrect": [
"Interpreted only with no compilation step"
],
"hint": "Consider the design principles that made Java popular for enterprise applications."
},
{
"question": "Which of the following are programming paradigms?",
"correct": [
"Procedural programming",
"Object-oriented programming",
"Functional programming",
"Logic programming",
"Event-driven programming"
],
"incorrect": [
],
"hint": "Programming paradigms are approaches to solving problems through programming."
},
{
"question": "Which are stages in the Software Development Life Cycle (SDLC)?",
"correct": [
"Requirements analysis",
"Implementation"
],
"incorrect": [
"Code optimization",
"User training",
"Hardware procurement"
],
"hint": "Focus on the core phases that every software project must go through."
},
{
"question": "Which of the following are critical aspects of software planning?",
"correct": [
"Requirements gathering",
"Resource allocation",
"Timeline estimation"
],
"incorrect": [
"Code debugging",
"User interface design"
],
"hint": "Think about what happens before actual development begins."
},
{
"question": "Which aspects are part of Implementation and Testing?",
"correct": [
"Writing code according to design specifications",
"Debugging software to fix issues",
"Unit testing individual components",
"Integration testing of combined components"
],
"incorrect": [
"Creating user manuals"
],
"hint": "Consider the activities that happen during the actual development phase."
},
{
"question": "What components are included in the Java Development Kit (JDK)?",
"correct": [
"Java compiler (javac)",
"Java Runtime Environment (JRE)",
"Java debugger (jdb)",
"Java documentation generator (javadoc)",
"Java archiver (jar)"
],
"incorrect": [
],
"hint": "The JDK contains all the tools needed for Java development."
},
{
"question": "Regarding compiling and running Java code, which statements are true?",
"correct": [
"Java source code (.java) is compiled into bytecode (.class)",
"Java bytecode runs on the Java Virtual Machine (JVM)"
],
"incorrect": [
"Java code is directly interpreted without compilation",
"Java bytecode is platform-specific",
"Java programs can run without the JVM being installed"
],
"hint": "Consider the two-step process that makes Java platform-independent."
},
{
"question": "Which elements are essential to the basic structure of a Java program?",
"correct": [
"Class declaration",
"Main method",
"Package statement (optional but common)"
],
"incorrect": [
"Database connection",
"GUI components"
],
"hint": "Focus on the minimal components needed for a valid Java program."
},
{
"question": "Which statements about the Java main method are correct?",
"correct": [
"It must be declared as 'public static void main(String[] args)'",
"It is the entry point of a Java application",
"It can receive command-line arguments through the args parameter",
"It must be contained within a class"
],
"incorrect": [
"It can have any name as long as it's declared public and static"
],
"hint": "Consider the specific signature and purpose of the main method in Java."
},
{
"question": "Regarding Java statements, which are correct?",
"correct": [
"Statements in Java must end with a semicolon",
"A statement represents a complete unit of execution"
],
"incorrect": [
"All statements in Java must be on separate lines",
"Comments are considered statements",
"Declaration statements cannot include initialization"
],
"hint": "Consider the basic syntax rules for Java statements."
},
{
"question": "Which statements about Java blocks are true?",
"correct": [
"Blocks are defined by curly braces {}",
"Blocks can contain multiple statements",
"Variables defined in a block are only accessible within that block"
],
"incorrect": [
"A Java program can only contain one block",
"Blocks always require a name"
],
"hint": "Consider the purpose and scope rules of code blocks in Java."
},
{
"question": "Regarding Java syntax whitespace and case sensitivity, which statements are true?",
"correct": [
"Java is case-sensitive, so 'myVariable' and 'MyVariable' are different",
"Extra whitespace between statements is ignored by the compiler",
"Indentation is not required but used for readability",
"Line breaks are generally ignored except in string literals",
"Keywords like 'public', 'class', and 'void' must be written in lowercase"
],
"incorrect": [
],
"hint": "Consider how Java handles spacing and capitalization in code."
},
{
"question": "How does the JVM (Java Virtual Machine) run a program?",
"correct": [
"It loads the bytecode into memory",
"It verifies the bytecode for safety and correctness",
"It executes the bytecode instructions"
],
"incorrect": [
"It directly runs the .java source code",
"It recompiles the bytecode into machine code each time"
],
"hint": "Consider the primary steps the JVM takes from loading to execution."
},
{
"question": "Which statements about syntax errors in Java are true?",
"correct": [
"Syntax errors are detected during compilation",
"Missing semicolons often cause syntax errors",
"Unmatched parentheses or braces cause syntax errors",
"The compiler identifies the location of syntax errors"
],
"incorrect": [
"Syntax errors only occur during program execution"
],
"hint": "Consider when and how syntax errors are detected in the development process."
},
{
"question": "Which statements about semantic errors in Java are true?",
"correct": [
"Semantic errors may not cause compilation failures",
"Infinite loops are examples of semantic errors",
"Using the wrong operator (e.g., + instead of ) can cause semantic errors",
"Semantic errors can lead to unexpected program behavior",
"Division by zero is a semantic error that causes runtime exceptions"
],
"incorrect": [
"None - all options are correct"
],
"hint": "Consider errors that involve incorrect program logic rather than incorrect syntax."
},
{
"question": "Which statements about Java comments are true?",
"correct": [
"Single-line comments begin with //",
"Multi-line comments are enclosed between / and /",
"Javadoc comments begin with /* and end with */"
],
"incorrect": [
"Comments are executed by the JVM",
"There is a limit to the number of comments allowed in a program"
],
"hint": "Consider the different types of comments and their purpose in Java."
},
{
"question": "Which practices are considered 'clean code' principles?",
"correct": [
"Using meaningful variable and function names",
"Writing code that is easy to understand and maintain"
],
"incorrect": [
"Minimizing the number of comments",
"Using as few lines as possible",
"Creating complex one-line solutions"
],
"hint": "Consider what makes code more readable and maintainable for other developers."
},
{
"question": "Which aspects are part of Computational Thinking?",
"correct": [
"Decomposition - breaking down problems into smaller parts",
"Pattern recognition - identifying similarities or patterns",
"Abstraction - focusing on important information while ignoring irrelevant details"
],
"incorrect": [
"Memorization - learning programming syntax by heart",
"Speculation - guessing program outcomes without analysis"
],
"hint": "Consider the fundamental cognitive strategies used to solve complex problems systematically."
},
{
"question": "Which are essential properties of algorithms?",
"correct": [
"Definiteness - each step is precisely defined",
"Finiteness - the algorithm must terminate after a finite number of steps",
"Input - an algorithm has zero or more inputs",
"Output - an algorithm has one or more outputs"
],
"incorrect": [
"Complexity - all algorithms must be mathematically complex"
],
"hint": "Consider the fundamental characteristics that make a set of instructions qualify as an algorithm."
},

 {
    "question": "What would be the output of this Java code?\n```java\npublic class PacMan {\n    public static void main(String[] args) {\n        System.out.println(\"Waka Waka Waka\")\n    }\n}\n```",
    "correct": [
      "Compilation error: ';' expected"
    ],
    "incorrect": [
      "Waka Waka Waka",
      "Compilation error: invalid method declaration",
      "Compilation error: class PacMan not found",
      "Runtime error: main method not properly defined"
    ],
    "hint": "Look carefully at the end of the println statement line."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class Tetris {\n    public static void Main(String[] args) {\n        System.out.println(\"Line Clear!\");\n    }\n}\n```",
    "correct": [
      "Runtime error: main method not found in class Tetris"
    ],
    "incorrect": [
      "Line Clear!",
      "Compilation error: invalid method declaration",
      "Compilation error: ';' expected",
      "The program will compile but do nothing"
    ],
    "hint": "Java is case-sensitive for method names, especially the program entry point."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class SpaceInvaders {\n    public static void main(String[] args) {\n        system.out.println(\"The aliens are coming!\");\n    }\n}\n```",
    "correct": [
      "Compilation error: cannot find symbol - variable system"
    ],
    "incorrect": [
      "The aliens are coming!",
      "Compilation error: ';' expected",
      "Runtime error: NullPointerException",
      "Compilation error: invalid method declaration"
    ],
    "hint": "Java is case-sensitive for class names as well."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class MarioBros {\n    public static void main(String[] args) {\n        System.out.println('Its-a me, Mario!');\n    }\n}\n```",
    "correct": [
      "Compilation error: unclosed character literal"
    ],
    "incorrect": [
      "Its-a me, Mario!",
      "I",
      "Compilation error: ';' expected",
      "Runtime error: invalid character constant"
    ],
    "hint": "Pay attention to the quotation marks used to enclose the text."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class DonkeyKong {\n    public static void main(String[] args) {\n        System.out.println(\"It's on like Donkey Kong!\");\n    \n}\n```",
    "correct": [
      "Compilation error: reached end of file while parsing"
    ],
    "incorrect": [
      "It's on like Donkey Kong!",
      "Compilation error: ';' expected",
      "Compilation error: invalid method declaration",
      "Runtime error: class definition incomplete"
    ],
    "hint": "Check if all opening braces have matching closing braces."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class Zelda {\n    public static void main(String[] args) {\n        System.out.println(Its dangerous to go alone!);\n    }\n}\n```",
    "correct": [
      "Compilation error: cannot find symbol - variable Its"
    ],
    "incorrect": [
      "Its dangerous to go alone!",
      "Compilation error: ';' expected",
      "Runtime error: NullPointerException",
      "Compilation error: class Its not found"
    ],
    "hint": "Check how string literals should be formatted in Java."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class Sonic {\n    public static void main(String[] args) {\n        System.out.PrintLn(\"Gotta go fast!\");\n    }\n}\n```",
    "correct": [
      "Compilation error: cannot find symbol - method PrintLn(String)"
    ],
    "incorrect": [
      "Gotta go fast!",
      "Compilation error: ';' expected",
      "Runtime error: method not found",
      "Compilation error: invalid method declaration"
    ],
    "hint": "Method names in Java are case-sensitive."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class StreetFighter {\n    public static void main(String[] args) {\n        System.out.println(\"Hadouken!\");\n    }\n}\n```",
    "correct": [
      "Hadouken!"
    ],
    "incorrect": [
      "Compilation error: illegal character",
      "Compilation error: unclosed string literal",
      "Compilation error: ';' expected",
      "Runtime error: invalid string format"
    ],
    "hint": "This code is syntactically correct. What would it print?"
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class Pokemon {\n    public static void main(String[] args) {\n        System.out.println(\"Gotta catch 'em all);\n    }\n}\n```",
    "correct": [
      "Compilation error: unclosed string literal"
    ],
    "incorrect": [
      "Gotta catch 'em all",
      "Compilation error: ';' expected",
      "Runtime error: StringIndexOutOfBoundsException",
      "Compilation error: illegal escape character"
    ],
    "hint": "Check if the string literal is properly closed."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class MortalKombat {\n    public static void main(String[] args) {\n        System.OUT.println(\"Finish him!\");\n    }\n}\n```",
    "correct": [
      "Compilation error: cannot find symbol - variable OUT"
    ],
    "incorrect": [
      "Finish him!",
      "Compilation error: ';' expected",
      "Runtime error: NullPointerException",
      "The program will compile but won't print anything"
    ],
    "hint": "Java is case-sensitive for field names too."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class GalageSpaceship {\n    public static void main(String[] args) {\n        System.out.println(\"Pew pew pew!\");;\n    }\n}\n```",
    "correct": [
      "Pew pew pew!"
    ],
    "incorrect": [
      "Compilation error: ';' unexpected",
      "Compilation error: empty statement",
      "Runtime error: syntax error",
      "Pew pew pew! Pew pew pew!"
    ],
    "hint": "Multiple semicolons at the end of a statement are treated as empty statements."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class FroggerFrog {\n    public static void main(String[] args) {\n        System.out.prontln(\"Hop across the road!\");\n    }\n}\n```",
    "correct": [
      "Compilation error: cannot find symbol - method prontln(String)"
    ],
    "incorrect": [
      "Hop across the road!",
      "Compilation error: ';' expected",
      "Runtime error: method not found",
      "Compilation error: invalid method declaration"
    ],
    "hint": "Check the spelling of the print method name."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class BubbleBobble {\n    public static void main(String[] args) {\n        java.System.out.println(\"Pop those bubbles!\");\n    }\n}\n```",
    "correct": [
      "Compilation error: package java.System does not exist"
    ],
    "incorrect": [
      "Pop those bubbles!",
      "Compilation error: ';' expected",
      "Runtime error: package not found",
      "Compilation error: cannot access java.System"
    ],
    "hint": "Check the correct package structure for the System class."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class Centipede {\n    public static void main() {\n        System.out.println(\"Mushroom field ahead!\");\n    }\n}\n```",
    "correct": [
      "Runtime error: main method not found in class Centipede"
    ],
    "incorrect": [
      "Mushroom field ahead!",
      "Compilation error: invalid method declaration",
      "Compilation error: missing parameter",
      "The program will compile but do nothing"
    ],
    "hint": "The main method must have a specific parameter list to be recognized as the program entry point."
  },
  {
    "question": "What would be the output of this Java code?\n```java\npublic class Asteroids {\n    public static void main(String[] args) {\n        System.out.println(\"Watch out for the\\Asteroid belt!\");\n    }\n}\n```",
    "correct": [
      "Compilation error: illegal escape character"
    ],
    "incorrect": [
      "Watch out for the\\Asteroid belt!",
      "Watch out for the Asteroid belt!",
      "Watch out for theAsteroid belt!",
      "Runtime error: invalid string format"
    ],
    "hint": "The backslash is used for escape sequences in Java strings. Not all characters can be escaped."
  }
]

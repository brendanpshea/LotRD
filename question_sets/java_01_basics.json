[
  {
    "question": "What is the correct file extension for Java source code files?",
    "correct": [
      ".java"
    ],
    "incorrect": [
      ".class",
      ".jar",
      ".jav",
      ".txt"
    ],
    "feedback": "Java source code files must use the .java extension. This tells the compiler that the file contains Java source code. When compiled with javac, these files produce .class files containing bytecode that can run on any Java Virtual Machine."
  },
  {
    "question": "Which of the following are valid Java variable declarations?",
    "correct": [
      "String customerName = \"Alice\";",
      "boolean isOpen = true;"
    ],
    "incorrect": [
      "int coffee price = 250;",
      "String 2name = \"Bob\";",
      "double price = \"4.50\";"
    ],
    "hint": "Variable names cannot contain spaces or start with numbers, and data types must match the values being assigned."
  },
  {
    "question": "Which statements about Java data types are correct?",
    "correct": [
      "int is used for whole numbers without decimals",
      "double is appropriate for storing money amounts with cents",
      "String values must be enclosed in double quotes"
    ],
    "incorrect": [
      "boolean can store the values 0 and 1",
      "char values are enclosed in double quotes"
    ],
    "hint": "Consider what type of data each Java data type is designed to hold and the syntax rules for literals."
  },
  {
    "question": "Which arithmetic operators are valid in Java?",
    "correct": [
      "+",
      "-",
      "*",
      "%"
    ],
    "incorrect": [
      "^"
    ],
    "hint": "Java uses specific symbols for arithmetic operations. Some mathematical symbols you might expect don't work in Java."
  },
  {
    "question": "What are the required structural elements of a standalone Java program?",
    "correct": [
      "A class declaration",
      "A main method",
      "Opening and closing braces",
      "The public keyword",
      "The static keyword"
    ],
    "incorrect": [],
    "hint": "Every standalone Java program needs specific components to compile and run successfully."
  },
  {
    "question": "Which demonstrates proper camelCase naming convention in Java?",
    "correct": [
      "customerName"
    ],
    "incorrect": [
      "customer_name",
      "CustomerName",
      "customername",
      "customer-name"
    ],
    "hint": "CamelCase starts with a lowercase letter and capitalizes the first letter of each subsequent word, with no spaces or special characters."
  },
  {
    "question": "Which are true about Java compilation and execution?",
    "correct": [
      "javac creates .class files",
      "java runs compiled programs"
    ],
    "incorrect": [
      "java compiles source code",
      "You can run .java files directly with java",
      "javac runs compiled programs"
    ],
    "hint": "Java has separate commands for compilation and execution, each with a specific purpose."
  },
  {
    "question": "Which are valid ways to output text in Java?",
    "correct": [
      "System.out.println(\"Hello\");",
      "System.out.print(\"Hello\");",
      "System.out.println(\"Hello\" + \" World\");"
    ],
    "incorrect": [
      "print(\"Hello\");",
      "println(\"Hello\");"
    ],
    "hint": "Java requires the full System.out prefix before print methods. Both println and print are valid, but they behave differently."
  },
  {
    "question": "Which data types would store these coffee shop values correctly: customer count (25), price ($4.50), shop name (\"Java Cafe\"), size code ('L')?",
    "correct": [
      "int for customer count",
      "double for price", 
      "String for shop name",
      "char for size code"
    ],
    "incorrect": [
      "String for customer count"
    ],
    "hint": "Match each data type to the appropriate kind of value based on whether it's a whole number, decimal, text, or single character."
  },
  {
    "question": "What does the modulus operator (%) return?",
    "correct": [
      "The remainder after division"
    ],
    "incorrect": [
      "The quotient of division",
      "The rounded result of division",
      "The decimal part of division",
      "The absolute value of division"
    ],
    "hint": "Think about what's left over when you divide numbers that don't divide evenly, like 17 divided by 5."
  },
  {
    "question": "Which are valid boolean variable assignments?",
    "correct": [
      "boolean isOpen = true;",
      "boolean isClosed = false;"
    ],
    "incorrect": [
      "boolean isOpen = 1;",
      "boolean isOpen = \"true\";",
      "boolean isOpen = True;"
    ],
    "hint": "Boolean variables can only hold specific values, and Java is case-sensitive for these values."
  },
  {
    "question": "Which variable names follow Java naming rules?",
    "correct": [
      "_price",
      "$total",
      "coffeePrice"
    ],
    "incorrect": [
      "2cups",
      "coffee-price"
    ],
    "hint": "Java variable names can start with letters, underscores, or dollar signs, but have restrictions on other characters and cannot start with numbers."
  },
  {
    "question": "What are the results of these expressions: 2 + 3 * 4 and (2 + 3) * 4?",
    "correct": [
      "14 and 20",
      "First is 14, second is 20",
      "14 for the first expression",
      "20 for the second expression"
    ],
    "incorrect": [
      "Both equal 20"
    ],
    "hint": "Java follows the standard order of operations (PEMDAS). Parentheses can change the order of evaluation."
  },
  {
    "question": "Which command compiles Java source code?",
    "correct": [
      "javac"
    ],
    "incorrect": [
      "java",
      "compile", 
      "javacompile",
      "javac.exe"
    ],
    "hint": "There are two main Java commands: one for compiling source code and another for running compiled programs."
  },
  {
    "question": "Which statements about Java strings are true?",
    "correct": [
      "Strings use double quotes",
      "Strings can contain spaces",
      "Strings can be empty (\"\") ",
      "Strings are case-sensitive",
      "Strings can contain numbers as text"
    ],
    "incorrect": [],
    "hint": "Consider the syntax rules and capabilities of Java String literals."
  },
  {
    "question": "Which escape sequence creates a new line in Java output?",
    "correct": [
      "\\n"
    ],
    "incorrect": [
      "\\t",
      "\\r",
      "/n",
      "\\newline"
    ],
    "hint": "Escape sequences in Java start with a backslash followed by a letter. Think about what 'n' might stand for."
  },
  {
    "question": "Which are characteristics of the int data type?",
    "correct": [
      "Stores whole numbers only",
      "Range is approximately -2 billion to +2 billion"
    ],
    "incorrect": [
      "Can store decimal values",
      "Range is unlimited",
      "Uses 64 bits of memory"
    ],
    "hint": "Consider what kinds of values int can hold and its memory limitations."
  },
  {
    "question": "Which of these correctly demonstrate char variable usage?",
    "correct": [
      "char size = 'L';",
      "char grade = 'A';",
      "char initial = 'M';"
    ],
    "incorrect": [
      "char size = \"L\";",
      "char word = 'Hello';"
    ],
    "hint": "The char data type has specific rules about what it can store and how values must be written."
  },
  {
    "question": "What files are involved in Java compilation and execution?",
    "correct": [
      ".java files contain source code",
      ".class files contain bytecode",
      "javac creates .class files",
      "java runs .class files"
    ],
    "incorrect": [
      ".java files are executable"
    ],
    "hint": "Java has a two-step process involving different file types for source code and compiled bytecode."
  },
  {
    "question": "Which statement about Java's \"Write Once, Run Anywhere\" is correct?",
    "correct": [
      "Java bytecode runs on any Java Virtual Machine"
    ],
    "incorrect": [
      "Java source code runs directly on any computer",
      "Java automatically converts to native machine code",
      "Java programs work without any runtime environment",
      "Java source files are platform independent"
    ],
    "hint": "Java achieves portability through an intermediate layer that abstracts away the differences between operating systems."
  },
  {
    "question": "Which demonstrate proper variable initialization?",
    "correct": [
      "double price = 4.50;",
      "int cups = 10;"
    ],
    "incorrect": [
      "double price;",
      "int cups = price * 2;",
      "String name;"
    ],
    "feedback": "Proper initialization gives variables values when they're declared. double price = 4.50; and int cups = 10; both declare and initialize variables correctly. The incorrect options show common mistakes: declaring without initializing (double price;), using an uninitialized variable in calculations (price hasn't been given a value yet), and leaving variables uninitialized (String name;)."
  },
  {
    "question": "What are the differences between println and print?",
    "correct": [
      "println adds a new line after output",
      "print keeps cursor on same line",
      "println moves to next line automatically"
    ],
    "incorrect": [
      "print is faster than println",
      "println can only print strings"
    ],
    "feedback": "The key difference is line handling: println automatically adds a newline character (\\n) after printing, moving the cursor to the next line, while print leaves the cursor on the same line. Both methods can print various data types, not just strings, and performance differences are negligible. The 'ln' in println stands for 'line'."
  },
  {
    "question": "Which would be appropriate uses for boolean variables in a coffee shop program?",
    "correct": [
      "Tracking if shop is open",
      "Recording if drink is decaffeinated",
      "Checking if customer is a loyalty member",
      "Determining if payment was successful"
    ],
    "incorrect": [
      "Storing customer age"
    ],
    "feedback": "Boolean variables are ideal for binary states - things that have exactly two possible values. Shop status (open/closed), drink properties (decaf/regular), membership status (member/non-member), and payment results (successful/failed) all fit this pattern. Customer age is a number that can have many different values, so it requires an int, not a boolean."
  },
  {
    "question": "What type of error occurs with this code: int price = 4.50;?",
    "correct": [
      "Compilation error"
    ],
    "incorrect": [
      "Runtime error",
      "Logic error",
      "No error occurs",
      "Warning message only"
    ],
    "feedback": "This causes a compilation error because Java enforces strict type checking. You cannot assign a double value (4.50) to an int variable (price). The compiler detects this type mismatch before the program runs and refuses to compile the code. This is a safety feature that prevents type-related bugs from occurring at runtime."
  },
  {
    "question": "Which are Java variable naming requirements and conventions?",
    "correct": [
      "Cannot start with numbers",
      "Cannot contain spaces",
      "Cannot use Java keywords",
      "Should use camelCase",
      "Should be descriptive"
    ],
    "incorrect": [],
    "feedback": "Java has both strict rules and style conventions for variable names. Strict rules enforced by the compiler: cannot start with numbers, cannot contain spaces, cannot use reserved keywords like 'class' or 'public'. Style conventions for readable code: use camelCase (customerName), make names descriptive (totalPrice instead of tp), start with lowercase letters. Following these makes code more maintainable."
  },
  {
    "question": "What happens when you try to use an uninitialized local variable?",
    "correct": [
      "Compilation error"
    ],
    "incorrect": [
      "Program runs with unpredictable values",
      "Java initializes it to zero automatically",
      "Runtime exception occurs",
      "Variable gets a random value"
    ],
    "feedback": "Java prevents the use of uninitialized local variables by generating a compilation error. The compiler tracks variable initialization and won't allow you to use a variable before it has been assigned a value. This safety feature prevents bugs that could occur if variables contained random or garbage values. Instance variables (class fields) are automatically initialized, but local variables are not."
  },
  {
    "question": "Which calculations are commonly needed in point-of-sale systems?",
    "correct": [
      "Multiplying price by quantity",
      "Adding multiple item costs"
    ],
    "incorrect": [
      "Using modulus for tax calculation",
      "Dividing prices by customers",
      "Subtracting to add tax"
    ],
    "feedback": "Point-of-sale systems perform standard arithmetic: multiplying unit price by quantity to get line totals (3 × $4.50 = $13.50), and adding multiple line items to get subtotals. Tax calculations use multiplication (subtotal × tax rate), not modulus. You don't divide prices by customers, and adding tax requires addition or multiplication, not subtraction."
  },
  {
    "question": "What are valid applications of the modulus operator?",
    "correct": [
      "Checking if numbers are even or odd",
      "Cycling through a fixed set of options",
      "Finding remainder in division"
    ],
    "incorrect": [
      "Calculating percentages",
      "Rounding decimal numbers"
    ],
    "feedback": "The modulus operator (%) finds remainders after division. This makes it useful for: determining if numbers are even (n % 2 == 0) or odd (n % 2 == 1), cycling through options (day % 7 for days of week), and getting the actual remainder in division problems. It's not used for percentages (that's multiplication) or rounding (that requires different methods)."
  },
  {
    "question": "Which concepts are essential for understanding Java program structure?",
    "correct": [
      "Classes define program templates",
      "Main method is the entry point",
      "Braces group code blocks",
      "Statements end with semicolons"
    ],
    "incorrect": [
      "Programs must have multiple classes"
    ],
    "feedback": "Java program structure relies on several key concepts: classes serve as blueprints that define what a program can do, the main method is where execution begins (public static void main), braces {} group related code into blocks, and semicolons ; mark the end of each statement. Simple programs need only one class, not multiple classes. These structural elements work together to create organized, readable code."
  },
  {
    "question": "What does this expression evaluate to: 17 % 5?",
    "correct": [
      "2"
    ],
    "incorrect": [
      "3",
      "3.4",
      "12",
      "0"
    ],
    "feedback": "The modulus operator (%) returns the remainder after division. To find 17 % 5, we divide: 17 ÷ 5 = 3 with remainder 2. So 17 % 5 = 2. This is different from the quotient (3), the decimal result (3.4), or other mathematical operations. The modulus specifically gives you what's 'left over' after dividing evenly."
  }
]
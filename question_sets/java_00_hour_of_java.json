[
  {
    "question": "Which of the following are true about Java?",
    "correct": [
      "Java was created in 1995",
      "Java can run on Windows, Mac, and Linux computers",
      "Android apps are written in Java"
    ],
    "incorrect": [
      "Java only works on Windows computers",
      "Java was created in 2010"
    ],
    "feedback": "Java was indeed created in 1995 and its 'write once, run anywhere' philosophy means it works across different operating systems. Android development heavily uses Java, making it one of the most widely used programming languages."
  },
  {
    "question": "What file extensions are used in Java programming?",
    "correct": [
      ".java files contain the source code you write",
      ".class files contain compiled bytecode"
    ],
    "incorrect": [
      ".txt files are used for Java programs",
      ".exe files are created when you compile Java",
      ".html files are needed to run Java programs"
    ],
    "feedback": "Java source code is written in .java files, which get compiled into .class files containing bytecode. The .txt, .exe, and .html extensions are not part of the standard Java compilation process."
  },
  {
    "question": "In this code: public class HelloWorld { }, which rules must be followed?",
    "correct": [
      "The filename must be HelloWorld.java (exact match)",
      "Java is case-sensitive, so 'HelloWorld' and 'helloworld' are different"
    ],
    "incorrect": [
      "The filename can be anything as long as it ends in .java",
      "Upper and lowercase don't matter in Java",
      "You can name the file hello.java and it will still work"
    ],
    "feedback": "Java requires that the filename exactly match the class name, including capitalization. This is a strict rule - HelloWorld.java is the only acceptable filename for a class named HelloWorld."
  },
  {
    "question": "What is the purpose of the main method: public static void main(String[] args)?",
    "correct": [
      "It's where your Java program starts running",
      "Every Java program needs this exact method signature to run"
    ],
    "incorrect": [
      "It's optional - programs can start anywhere",
      "You can change 'main' to any name you want",
      "It's only needed for advanced programs"
    ],
    "feedback": "The main method is the entry point for Java programs. The Java Virtual Machine looks for this exact method signature to know where to start executing your code."
  },
  {
    "question": "Which statements about semicolons in Java are correct?",
    "correct": [
      "Most Java statements must end with a semicolon",
      "Forgetting a semicolon will cause a compile error",
      "System.out.println(\"Hello\"); needs a semicolon at the end"
    ],
    "incorrect": [
      "Semicolons are optional in Java",
      "Only the last line in your program needs a semicolon"
    ],
    "feedback": "Semicolons are required to end most Java statements, just like periods end sentences. The compiler will refuse to run your program if you forget them in the wrong places."
  },
  {
    "question": "Which are valid ways to declare variables in Java?",
    "correct": [
      "int age = 18;",
      "String name = \"Java\";",
      "double price = 19.99;"
    ],
    "incorrect": [
      "age = 18; (without specifying int)",
      "String name = Java; (without quotes)"
    ],
    "feedback": "Java requires you to specify the data type when declaring variables. Strings must be enclosed in double quotes, while numbers don't need quotes."
  },
  {
    "question": "What data types would you use for these values?",
    "correct": [
      "int for whole numbers like 25 or -5",
      "String for text like \"Hello World\"",
      "boolean for true/false values"
    ],
    "incorrect": [
      "String for numbers like 42",
      "int for text like \"abc\""
    ],
    "feedback": "Choose data types based on what kind of information you're storing: int for whole numbers, double for decimals, String for text, and boolean for true/false values."
  },
  {
    "question": "How do you join strings together in Java?",
    "correct": [
      "Use the + operator: \"Hello\" + \" \" + \"World\"",
      "You can mix strings and numbers: \"Age: \" + 25"
    ],
    "incorrect": [
      "Use the & operator: \"Hello\" & \"World\"",
      "Just write them next to each other: \"Hello\"\"World\"",
      "Use a comma: \"Hello\", \"World\""
    ],
    "feedback": "The + operator concatenates (joins) strings in Java. You can also use + to combine strings with numbers, and Java will automatically convert the number to text."
  },
  {
    "question": "To get user input, what do you need to do? (Hint: Scanner class)",
    "correct": [
      "Import java.util.Scanner at the top of your program",
      "Create a Scanner object: Scanner input = new Scanner(System.in);",
      "Use methods like input.nextLine() to read input"
    ],
    "incorrect": [
      "Java automatically reads user input without any setup",
      "Use System.out.println() to get input"
    ],
    "feedback": "The Scanner class handles user input in Java. You must import it, create a Scanner object, and then use its methods like nextLine() for text or nextInt() for numbers."
  },
  {
    "question": "What's the difference between System.out.print() and System.out.println()?",
    "correct": [
      "print() stays on the same line",
      "println() moves to the next line after printing"
    ],
    "incorrect": [
      "print() and println() do exactly the same thing",
      "println() prints twice",
      "print() is for numbers, println() is for text"
    ],
    "feedback": "The difference is in cursor positioning: print() leaves the cursor on the same line, while println() moves to the next line. This affects where the next output will appear."
  },
  {
    "question": "Which arithmetic operators work in Java?",
    "correct": [
      "+ for addition",
      "- for subtraction", 
      "* for multiplication",
      "/ for division"
    ],
    "incorrect": [
      "x for multiplication"
    ],
    "feedback": "Java uses standard math symbols for basic arithmetic: +, -, *, and /. Note that * (asterisk) is used for multiplication, not the letter x."
  },
  {
    "question": "What happens with integer division in Java? (Example: 7 / 2)",
    "correct": [
      "Java drops the decimal part and gives you 3",
      "To get 3.5, you need to use 7.0 / 2 or 7 / 2.0"
    ],
    "incorrect": [
      "Java automatically gives you 3.5",
      "Java rounds 3.5 to 4",
      "You get an error message"
    ],
    "feedback": "When dividing integers, Java performs integer division and drops any decimal portion. To get decimal results, at least one number must be a decimal (double) value."
  },
  {
    "question": "Which comparison operators can you use in if statements?",
    "correct": [
      "== to check if two values are equal",
      "!= to check if two values are different", 
      "< and > for less than and greater than"
    ],
    "incorrect": [
      "= to check if two values are equal",
      "=> for greater than or equal"
    ],
    "feedback": "Use == (double equals) for equality comparison, not = (single equals which is for assignment). The correct operator for greater than or equal is >=, not =>."
  },
  {
    "question": "How do you write an if-else statement in Java?",
    "correct": [
      "if (condition) { code } else { other code }",
      "The condition must be inside parentheses",
      "Code blocks are surrounded by curly braces { }"
    ],
    "incorrect": [
      "if condition then code else other code",
      "Parentheses around the condition are optional"
    ],
    "feedback": "Java if-else statements require parentheses around the condition and curly braces around code blocks. This is different from plain English - you must follow Java's specific syntax."
  },
  {
    "question": "What logical operators can you use to combine conditions?",
    "correct": [
      "&& means AND (both conditions must be true)",
      "|| means OR (at least one condition must be true)"
    ],
    "incorrect": [
      "AND and OR (spelled out as words)",
      "+ means AND",
      "& means AND (single ampersand)"
    ],
    "feedback": "Java uses symbols for logical operators: && for AND and || for OR. While & can work in some cases, && is the standard AND operator that's safer to use."
  },
  {
    "question": "How do you write a for loop that counts from 1 to 5?",
    "correct": [
      "for (int i = 1; i <= 5; i++)",
      "i++ means add 1 to i after each loop"
    ],
    "incorrect": [
      "for (i = 1; i <= 5; i++)",
      "for (int i = 1; i < 5; i++)",
      "for (int i = 1; i <= 5; i + 1)"
    ],
    "feedback": "For loops need three parts: initialization (int i = 1), condition (i <= 5), and increment (i++). Note that i <= 5 includes 5, while i < 5 would stop at 4. Also, i++ is the correct increment syntax, not i + 1."
  },
  {
    "question": "When should you use a while loop instead of a for loop?",
    "correct": [
      "When you don't know exactly how many times to repeat",
      "When waiting for user input or a specific condition"
    ],
    "incorrect": [
      "While loops are always better than for loops",
      "For loops are only for counting numbers",
      "You should never use while loops"
    ],
    "feedback": "Use for loops when you know the number of repetitions in advance. Use while loops when you're waiting for something to happen or when the number of iterations depends on changing conditions."
  },
  {
    "question": "What is a method in Java?",
    "correct": [
      "A reusable block of code that performs a specific task",
      "Methods help organize your code and avoid repetition"
    ],
    "incorrect": [
      "A type of variable that stores multiple values",
      "A way to import other Java programs",
      "Another name for a class"
    ],
    "feedback": "Methods are like mini-programs within your program. They allow you to write code once and use it multiple times, making your programs more organized and easier to maintain."
  },
  {
    "question": "How do you create a method that prints a message?",
    "correct": [
      "public static void methodName() { code here }",
      "The method name should describe what it does"
    ],
    "incorrect": [
      "method methodName() { code here }",
      "def methodName() { code here }",
      "function methodName() { code here }"
    ],
    "feedback": "Java methods start with 'public static' (for now), followed by the return type ('void' if no return value), then the method name and parentheses. The 'def' and 'function' keywords are from other programming languages."
  },
  {
    "question": "How do you create a method that returns a value?",
    "correct": [
      "Specify the return type: public static int addNumbers()",
      "Use 'return' to send a value back: return result;"
    ],
    "incorrect": [
      "All methods automatically return values",
      "Use 'give back' instead of 'return'",
      "Put the return value in parentheses: return(result);"
    ],
    "feedback": "Methods that return values must declare the return type (like int, String, double) and use the 'return' keyword followed by the value. The parentheses around the return value are optional."
  },
  {
    "question": "What is Java Swing used for?",
    "correct": [
      "Creating windows, buttons, and graphical user interfaces",
      "Making programs with clickable elements instead of just text"
    ],
    "incorrect": [
      "Making Java programs run faster",
      "Connecting to the internet",
      "Working with files and databases"
    ],
    "feedback": "Swing is Java's toolkit for creating graphical user interfaces (GUIs). It lets you build programs with windows, buttons, text boxes, and other visual elements that users can interact with."
  },
  {
    "question": "What are the basic Swing components mentioned in the lesson?",
    "correct": [
      "JFrame for the main window",
      "JButton for clickable buttons",
      "JLabel for displaying text"
    ],
    "incorrect": [
      "JWindow for buttons",
      "JText for the main window"
    ],
    "feedback": "The main Swing components are JFrame (creates windows), JButton (creates clickable buttons), and JLabel (displays text). Each component has a specific purpose in building user interfaces."
  },
  {
    "question": "How do you make a Swing window appear on screen?",
    "correct": [
      "Call window.setVisible(true) at the end",
      "Set the window size with window.setSize(width, height)"
    ],
    "incorrect": [
      "Windows automatically appear when created",
      "Use window.show() to display the window",
      "Call window.display() to show the window"
    ],
    "feedback": "Swing windows are invisible by default. You must call setVisible(true) to make them appear. You should also set the size before making it visible, or it might be too small to see properly."
  },
  {
    "question": "What is a JAR file?",
    "correct": [
      "A way to package your Java program into one file",
      "JAR files can run on any computer with Java installed"
    ],
    "incorrect": [
      "A type of Java variable",
      "A method for writing faster code",
      "A Java debugging tool"
    ],
    "feedback": "JAR (Java Archive) files bundle your compiled Java program into a single, portable file. This makes it easy to share your programs with others - they just need Java installed to run your JAR file."
  },
  {
    "question": "How do you create a JAR file in the lesson?",
    "correct": [
      "First compile with javac FileName.java",
      "Then create JAR with jar cfe FileName.jar FileName *.class"
    ],
    "incorrect": [
      "Use the 'package' command to create JARs",
      "JAR files are created automatically when you compile",
      "You need special software to create JAR files"
    ],
    "feedback": "Creating a JAR is a two-step process: first compile your Java code into .class files, then use the 'jar' command to package those class files into a single JAR file."
  },
  {
    "question": "What does 'Write Once, Run Anywhere' mean for Java?",
    "correct": [
      "Code you write works on different operating systems",
      "You don't need to rewrite your program for Windows, Mac, or Linux"
    ],
    "incorrect": [
      "You only need to write each line of code once",
      "Java programs automatically work on phones and tablets",
      "Java code runs faster than other programming languages"
    ],
    "feedback": "Java's 'Write Once, Run Anywhere' philosophy means that Java bytecode can run on any system with a Java Virtual Machine installed, regardless of the underlying operating system."
  },
  {
    "question": "In the guessing game example, what makes the game keep asking for input?",
    "correct": [
      "A while loop that continues until the guess is correct",
      "The condition while (guess != secretNumber)"
    ],
    "incorrect": [
      "A for loop that runs 10 times",
      "The Scanner automatically repeats questions",
      "Java programs naturally repeat until closed"
    ],
    "feedback": "The while loop keeps the guessing game running by checking if the current guess matches the secret number. As long as they don't match (!= means not equal), the loop continues asking for new guesses."
  },
  {
    "question": "What happens when you click a button in a Swing application?",
    "correct": [
      "An ActionListener responds to the click event",
      "You can write code that runs when the button is clicked"
    ],
    "incorrect": [
      "Buttons automatically print 'Button clicked' to the console",
      "Nothing happens unless you restart the program",
      "The window automatically closes"
    ],
    "feedback": "Button clicks generate events that ActionListeners can respond to. You write code inside the ActionListener that specifies what should happen when someone clicks the button."
  },
  {
    "question": "Why are variables useful in programming?",
    "correct": [
      "They store information you can use later in your program",
      "They make your code more readable with descriptive names",
      "You can change their values as your program runs"
    ],
    "incorrect": [
      "Variables make programs run faster",
      "You can only use each variable once"
    ],
    "feedback": "Variables are containers for data that can be referenced by name throughout your program. They make code more understandable and allow you to work with changing information."
  },
  {
    "question": "What's the purpose of curly braces { } in Java?",
    "correct": [
      "They group related code together into blocks",
      "Every opening brace { needs a matching closing brace }"
    ],
    "incorrect": [
      "They're only used for decoration",
      "You can use parentheses ( ) instead of curly braces",
      "They're optional in most cases"
    ],
    "feedback": "Curly braces define code blocks in Java - they show which statements belong together. This is essential for classes, methods, if statements, loops, and other control structures. They must always be matched in pairs."
  }
]
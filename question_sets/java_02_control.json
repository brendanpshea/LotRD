[
  {
    "question": "What is the correct syntax for a basic if statement in Java?",
    "correct": [
      "if (condition) { code; }"
    ],
    "incorrect": [
      "if condition { code; }",
      "if (condition): code;",
      "if [condition] { code; }",
      "if condition then { code; }"
    ],
    "feedback": "Java if statements require the condition to be enclosed in parentheses () and the code block to be enclosed in braces {}. The condition must be a boolean expression that evaluates to true or false. Other programming languages may use different syntax, but Java specifically requires this format."
  },
  {
    "question": "Which comparison operators are valid in Java?",
    "correct": [
      "== (equal to)",
      ">= (greater than or equal)"
    ],
    "incorrect": [
      "= (equal to)",
      "=> (greater than or equal)",
      "<> (not equal to)"
    ],
    "feedback": "Java uses == for equality comparison (not = which is assignment), >= for greater than or equal (not => which is used in other contexts), and != for not equal (not <> which is used in some other languages). The single = is always assignment, never comparison."
  },
  {
    "question": "Which statements about if-else if chains are correct?",
    "correct": [
      "Conditions are checked from top to bottom",
      "Only the first true condition executes",
      "The final else is optional"
    ],
    "incorrect": [
      "All true conditions execute",
      "Conditions are checked randomly"
    ],
    "feedback": "Java evaluates if-else if chains sequentially from top to bottom. Once a condition evaluates to true, that block executes and the rest are skipped. This means order matters - more specific conditions should come first. The final else block is optional and only executes if none of the previous conditions were true."
  },
  {
    "question": "Which are valid ways to combine conditions using logical operators?",
    "correct": [
      "age >= 21 && hasID",
      "isWeekend || isHoliday",
      "(isMember && spent > 50) || points >= 100",
      "hasID && age >= 18 && age < 65"
    ],
    "incorrect": [
      "age >= 21 & hasID"
    ],
    "feedback": "Java uses && for logical AND and || for logical OR. You can combine multiple conditions and use parentheses for grouping. The single & and | operators exist but are bitwise operators, not logical operators, and behave differently. Always use && and || for boolean logic in conditionals."
  },
  {
    "question": "What are the essential components of a for loop?",
    "correct": [
      "Initialization statement",
      "Boolean condition",
      "Increment/update expression",
      "Loop body in braces",
      "Semicolons separating the parts"
    ],
    "incorrect": [],
    "feedback": "A for loop has three parts separated by semicolons: initialization (runs once at start), condition (checked before each iteration), and increment (runs after each iteration). The loop body contains the code to repeat. The syntax is: for(initialization; condition; increment) { body }."
  },
  {
    "question": "How do you declare an array in Java?",
    "correct": [
      "String[] names = {\"Alice\", \"Bob\"};"
    ],
    "incorrect": [
      "String names[] = (\"Alice\", \"Bob\");",
      "array String names = [\"Alice\", \"Bob\"];",
      "String names = {\"Alice\", \"Bob\"};",
      "String[] names = [\"Alice\", \"Bob\"];"
    ],
    "feedback": "Java arrays are declared with the data type followed by square brackets [], then the variable name, equals sign, and values in curly braces {}. The syntax is: dataType[] arrayName = {value1, value2, ...}. Square brackets are used in the declaration, but curly braces contain the initial values."
  },
  {
    "question": "Which statements about array indexing are true?",
    "correct": [
      "Arrays start at index 0",
      "The last element is at index length-1"
    ],
    "incorrect": [
      "Arrays start at index 1",
      "The last element is at index length",
      "Array indices can be negative"
    ],
    "feedback": "Java arrays use zero-based indexing, meaning the first element is at index 0, the second at index 1, and so on. If an array has 5 elements, the valid indices are 0, 1, 2, 3, 4. The last element is always at index length-1. Accessing an index that doesn't exist (like index 5 in a 5-element array) causes an IndexOutOfBoundsException."
  },
  {
    "question": "Which are valid ways to process all elements in an array?",
    "correct": [
      "for (int i = 0; i < array.length; i++)",
      "for (int i = 0; i < array.length; i += 1)",
      "while (i < array.length) with proper increment"
    ],
    "incorrect": [
      "for (int i = 0; i <= array.length; i++)",
      "for (int i = 1; i <= array.length; i++)"
    ],
    "feedback": "To safely process all array elements, use i < array.length (not <=) to avoid going past the end. Start at index 0 (not 1) since arrays are zero-indexed. You can use for loops with i++ or i += 1, or while loops with proper increment. Using <= or starting at 1 will cause index out of bounds errors."
  },
  {
    "question": "What does the array.length property return?",
    "correct": [
      "The number of elements in the array",
      "An int value representing array size",
      "The count of items stored",
      "The total capacity of the array"
    ],
    "incorrect": [
      "The highest valid index number"
    ],
    "feedback": "The array.length property returns the total number of elements in the array as an int value. For an array with 5 elements, length returns 5. Note that this is different from the highest valid index, which would be 4 (since indices start at 0). Also note it's length (no parentheses), not length()."
  },
  {
    "question": "Which creates an infinite loop?",
    "correct": [
      "while (true) { System.out.println(\"Hello\"); }"
    ],
    "incorrect": [
      "for (int i = 0; i < 10; i++) { System.out.println(i); }",
      "while (x < 5) { x++; }",
      "for (int i = 10; i > 0; i--) { System.out.println(i); }",
      "while (false) { System.out.println(\"Never runs\"); }"
    ],
    "feedback": "An infinite loop occurs when the termination condition never becomes false. while(true) creates an infinite loop because true never changes to false. The other examples either have proper termination conditions or never run at all (while(false)). To avoid infinite loops, ensure the loop body eventually makes the condition false."
  },
  {
    "question": "Which are correct uses of the AND operator (&&)?",
    "correct": [
      "if (hasID && age >= 21)",
      "while (isOpen && customers < maxCapacity)"
    ],
    "incorrect": [
      "if (hasID & age >= 21)",
      "if (hasID AND age >= 21)",
      "if (hasID && age = 21)"
    ],
    "feedback": "The logical AND operator in Java is && (double ampersand). Both conditions must be true for the entire expression to be true. Single & is a bitwise operator, not logical AND. 'AND' is not a Java keyword. Also remember to use == for comparison, not = which is assignment."
  },
  {
    "question": "Which statements about while loops are accurate?",
    "correct": [
      "They continue as long as the condition is true",
      "The condition is checked before each iteration",
      "They're useful when you don't know how many iterations you need"
    ],
    "incorrect": [
      "They always run at least once",
      "The condition is checked after each iteration"
    ],
    "feedback": "While loops check the condition before each iteration, so if the condition is false initially, the loop never runs. They continue as long as the condition remains true and are ideal when the number of iterations depends on changing conditions rather than a fixed count. Do-while loops (which check after each iteration) always run at least once, but regular while loops may not run at all."
  },
  {
    "question": "What results from this expression: 5 > 3 && 2 < 4?",
    "correct": [
      "true"
    ],
    "incorrect": [
      "false",
      0,
      1
    ],
    "feedback": "This expression evaluates to true because both conditions are true. 5 > 3 evaluates to true, 2 < 4 evaluates to true, and true && true equals true. The AND operator (&&) only returns true when both operands are true."
  },
  {
    "question": "Which correctly accesses the third element of an array named 'drinks'?",
    "correct": [
      "drinks[2]"
    ],
    "incorrect": [
      "drinks[3]",
      "drinks(2)",
      "drinks.get(2)",
      "drinks[third]"
    ],
    "feedback": "Since arrays use zero-based indexing, the third element is at index 2 (first=0, second=1, third=2). Square brackets [] are used for array access, not parentheses (). The get() method is used with collections like ArrayList, not arrays. Variable names like 'third' would need to be defined as integers to be valid indices."
  },
  {
    "question": "Which are benefits of using arrays over individual variables?",
    "correct": [
      "Organization of related data",
      "Easier to process with loops",
      "Scalable to handle many items",
      "Reduced code duplication",
      "Centralized data management"
    ],
    "incorrect": [],
    "feedback": "Arrays provide numerous advantages: they keep related data organized in one structure, enable efficient processing with loops instead of repetitive code, scale easily to handle any number of items, reduce code duplication, and centralize data management. Instead of declaring dozens of individual variables, you can use one array to hold all related values."
  },
  {
    "question": "What is wrong with this array access: array[array.length]?",
    "correct": [
      "Index out of bounds error"
    ],
    "incorrect": [
      "Syntax error with brackets",
      "Should use parentheses instead",
      "Missing semicolon",
      "Nothing wrong with this code"
    ],
    "feedback": "This causes an index out of bounds error because array indices range from 0 to length-1. If an array has 5 elements, valid indices are 0, 1, 2, 3, 4. Using array.length (which equals 5) tries to access the 6th element, which doesn't exist. The correct way to access the last element is array[array.length - 1]."
  },
  {
    "question": "Which are valid for loop variations?",
    "correct": [
      "for (int i = 0; i < 10; i++)",
      "for (int i = 1; i <= 5; i++)"
    ],
    "incorrect": [
      "for (int i = 0; i < 10)",
      "for (i = 0; i < 10; i++)",
      "for (int i = 0, i < 10, i++)"
    ],
    "feedback": "Valid for loops need all three parts separated by semicolons: initialization, condition, and increment. The variable must be declared (int i) or previously declared. The missing increment makes an infinite loop, undeclared variables cause compilation errors, and commas instead of semicolons create syntax errors."
  },
  {
    "question": "Which logical expressions evaluate to true?",
    "correct": [
      "true || false",
      "false || true",
      "true && true"
    ],
    "incorrect": [
      "false && true",
      "false && false"
    ],
    "feedback": "The OR operator (||) returns true if at least one operand is true, so true || false and false || true both equal true. The AND operator (&&) returns true only when both operands are true, so true && true equals true, but false && true and false && false both equal false."
  },
  {
    "question": "What happens when you access an array element that doesn't exist?",
    "correct": [
      "Runtime exception occurs",
      "IndexOutOfBoundsException is thrown",
      "Program crashes with an error",
      "ArrayIndexOutOfBoundsException occurs"
    ],
    "incorrect": [
      "Returns null value"
    ],
    "feedback": "Accessing an invalid array index causes a runtime exception called ArrayIndexOutOfBoundsException (a subtype of IndexOutOfBoundsException). This crashes the program unless the exception is caught and handled. The program doesn't return null - it fails immediately when the invalid access is attempted."
  },
  {
    "question": "Which correctly creates a for loop that counts from 1 to 10?",
    "correct": [
      "for (int i = 1; i <= 10; i++)"
    ],
    "incorrect": [
      "for (int i = 1; i < 10; i++)",
      "for (int i = 0; i <= 10; i++)",
      "for (int i = 1; i <= 10; i--)",
      "for (int i = 1; i < 11; i++)"
    ],
    "feedback": "To count from 1 to 10 inclusive, start with i = 1 and continue while i <= 10. Using i < 10 stops at 9. Starting at 0 includes an extra number. Using i-- decrements instead of increments. While i < 11 works mathematically, i <= 10 is clearer and more conventional."
  },
  {
    "question": "Which statements about compound conditionals are true?",
    "correct": [
      "Parentheses can group complex conditions",
      "AND has higher precedence than OR"
    ],
    "incorrect": [
      "OR has higher precedence than AND",
      "Parentheses are not allowed in conditionals",
      "You can only combine two conditions maximum"
    ],
    "feedback": "Compound conditionals allow complex logic with parentheses for grouping, like (a && b) || (c && d). AND (&&) has higher precedence than OR (||), meaning a && b || c is evaluated as (a && b) || c. You can combine many conditions using multiple operators and parentheses for clarity."
  },
  {
    "question": "What is the difference between = and == in Java?",
    "correct": [
      "= assigns values, == compares values",
      "= is assignment operator, == is equality operator",
      "= changes variables, == tests equality"
    ],
    "incorrect": [
      "They are interchangeable",
      "== assigns values, = compares values"
    ],
    "feedback": "This is a crucial distinction: = is the assignment operator that stores a value in a variable (x = 5), while == is the equality operator that compares two values and returns true or false (x == 5). Using = in an if statement condition is usually an error that assigns instead of comparing."
  },
  {
    "question": "Which array declarations are syntactically correct?",
    "correct": [
      "int[] numbers = {1, 2, 3};",
      "String[] names = new String[5];",
      "double[] prices = new double[]{4.50, 3.25};"
    ],
    "incorrect": [
      "int numbers[] = (1, 2, 3);",
      "array int[] numbers = {1, 2, 3};"
    ],
    "feedback": "Java arrays can be declared with immediate initialization using {}, with a fixed size using new dataType[size], or with new and immediate values using new dataType[]{values}. Parentheses instead of braces and the 'array' keyword are not valid Java syntax."
  },
  {
    "question": "Which loop structure is best for processing every element in a single array?",
    "correct": [
      "for loop with array.length"
    ],
    "incorrect": [
      "while loop with fixed counter",
      "do-while loop",
      "Nested loops",
      "switch statement"
    ],
    "feedback": "For loops are ideal for array processing because they provide automatic initialization, condition checking, and increment in one compact structure. Using for (int i = 0; i < array.length; i++) safely processes every element. While loops can work but require more manual setup, and switch statements aren't loops at all."
  },
  {
    "question": "What are the key components needed to avoid infinite loops?",
    "correct": [
      "A termination condition that can become false",
      "Code that modifies the loop variable",
      "Proper initialization of control variables",
      "Logic that eventually changes the condition"
    ],
    "incorrect": [
      "Using only for loops instead of while loops"
    ],
    "feedback": "To avoid infinite loops, ensure: 1) the termination condition can actually become false, 2) the loop body contains code that modifies variables used in the condition, 3) control variables are properly initialized, and 4) the logic progresses toward the termination condition. Both for and while loops can be infinite if not designed correctly."
  },
  {
    "question": "Which demonstrates correct parallel array usage?",
    "correct": [
      "names[i] and ages[i] refer to the same person"
    ],
    "incorrect": [
      "names[0] and ages[1] refer to the same person",
      "Parallel arrays must have different lengths",
      "Array indices don't need to correspond",
      "Parallel arrays can't be processed together"
    ],
    "feedback": "Parallel arrays store related data where elements at the same index position correspond to each other. If names[0] = \"Alice\" and ages[0] = 25, they both refer to the same person. The arrays should have the same length, and you process them together using the same index value to access corresponding elements."
  },
  {
    "question": "What results from this condition: 10 > 5 || 3 > 8?",
    "correct": [
      "true",
      "First condition is true so result is true",
      "OR returns true when at least one condition is true",
      "10 > 5 is true, making the whole expression true"
    ],
    "incorrect": [
      "false"
    ],
    "feedback": "This evaluates to true because the OR operator (||) returns true if at least one condition is true. Even though 3 > 8 is false, 10 > 5 is true, and true || false equals true. The OR operator only returns false when both conditions are false."
  },
  {
    "question": "Which are characteristics of effective loop design?",
    "correct": [
      "Clear initialization of control variables",
      "Meaningful termination conditions",
      "Proper increment/update of loop variables",
      "Code that progresses toward loop exit",
      "Bounds checking for array access"
    ],
    "incorrect": [],
    "feedback": "Well-designed loops have clear initialization (setting starting values), meaningful termination conditions (when to stop), proper updates to control variables (moving toward termination), code that makes progress toward the exit condition, and bounds checking when accessing arrays to prevent index errors. These practices ensure loops execute correctly and safely."
  },
  {
    "question": "What is the output of this loop: for(int i = 0; i < 3; i++) { System.out.print(i + \" \"); }?",
    "correct": [
      "0 1 2"
    ],
    "incorrect": [
      "1 2 3",
      "0 1 2 3",
      "0 1",
      "1 2"
    ],
    "feedback": "The loop starts with i = 0, continues while i < 3, and increments i after each iteration. It prints i followed by a space during each iteration. The sequence is: i=0 (print '0 '), i=1 (print '1 '), i=2 (print '2 '), then i=3 makes the condition false so the loop stops. The result is '0 1 2 '."
  },
  {
    "question": "Which statements about array initialization are correct?",
    "correct": [
      "Arrays can be initialized with specific values",
      "Arrays can be created with a fixed size",
      "Array size is determined at creation time",
      "Empty arrays fill with default values"
    ],
    "incorrect": [
      "Array size can be changed after creation"
    ],
    "feedback": "Java arrays are fixed-size once created. You can initialize with specific values using {value1, value2}, create with a fixed size using new dataType[size], or combine both approaches. Empty arrays are filled with default values (0 for numbers, null for objects, false for booleans). The size cannot be changed after creation - you'd need to create a new array."
  }
]
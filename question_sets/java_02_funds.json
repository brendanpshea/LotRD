[
  {
    "question": "Which of the following are valid ways to declare and initialize variables in Java?",
    "correct": [
      "int count = 0;",
      "String name = \"Java\";",
      "boolean isActive = false;"
    ],
    "incorrect": [
      "var x;",
      "int number = \"123\";"
    ],
    "hint": "Java requires variables to have a type and initialization compatible with that type."
  },
  {
    "question": "Which of the following are valid variable names in Java?",
    "correct": [
      "_value",
      "camelCaseVariable",
      "studentAge",
      "$price"
    ],
    "incorrect": [
      "2ndAttempt"
    ],
    "hint": "Java variable names can start with a letter, underscore (_), or dollar sign ($), but never with a digit."
  },
  {
    "question": "Which statements about static typing in Java are correct?",
    "correct": [
      "The type of a variable must be declared before it can be used.",
      "Once a variable is declared with a type, it cannot be changed to another type."
    ],
    "incorrect": [
      "Java allows dynamic type conversion during runtime.",
      "Variables in Java don't need type declarations.",
      "Java variables can hold any type of value regardless of their declared type."
    ],
    "hint": "Java is a statically-typed language, which means types are checked at compile time."
  },
  {
    "question": "Which of the following are properties of primitive types in Java?",
    "correct": [
      "They are stored directly on the stack.",
      "They have fixed memory sizes.",
      "They hold their values directly."
    ],
    "incorrect": [
      "They can store null values.",
      "They are objects."
    ],
    "hint": "Primitive types are the basic building blocks of data in Java."
  },
  {
    "question": "Which of the following are correct about int data type in Java?",
    "correct": [
      "It occupies 4 bytes of memory.",
      "Its range is from -2,147,483,648 to 2,147,483,647.",
      "int is the most commonly used integer type in Java.",
      "The default value for an int field is 0."
    ],
    "incorrect": [
      "int variables can store decimal values."
    ],
    "hint": "int is a 32-bit signed primitive data type in Java."
  },
  {
    "question": "Which statements about shorts, longs, and bytes in Java are correct?",
    "correct": [
      "byte occupies 1 byte, short occupies 2 bytes, and long occupies 8 bytes.",
      "Long literals are denoted with an 'L' or 'l' suffix (e.g., 100L)."
    ],
    "incorrect": [
      "shorts can store larger numbers than ints.",
      "bytes can store the same range of values as shorts.",
      "longs and ints have the same memory size."
    ],
    "hint": "Different integer types in Java vary by their memory size and value range."
  },
  {
    "question": "Which of the following are true about floats and doubles in Java?",
    "correct": [
      "float occupies 4 bytes while double occupies 8 bytes.",
      "Double provides more precision than float.",
      "Float literals require an 'f' or 'F' suffix (e.g., 3.14f)."
    ],
    "incorrect": [
      "float and double guarantee exact representation of decimal values.",
      "float variables can store larger numbers than double variables."
    ],
    "hint": "Floating-point types are used for representing decimal values in Java."
  },
  {
    "question": "Which statements about the char data type in Java are correct?",
    "correct": [
      "char represents a single Unicode character.",
      "char values are enclosed in single quotes (e.g., 'A').",
      "char occupies 2 bytes of memory.",
      "char variables can be assigned numeric values that represent Unicode code points."
    ],
    "incorrect": [
      "Multiple characters can be stored in a single char variable."
    ],
    "hint": "char is used to store a single character in Java and is based on the Unicode character set."
  },
  {
    "question": "Which statements about the boolean data type in Java are correct?",
    "correct": [
      "boolean variables can only have the values true or false.",
      "The default value for a boolean field is false."
    ],
    "incorrect": [
      "boolean values can be represented as 1 and 0 in Java.",
      "boolean occupies 1 byte of memory on all Java platforms.",
      "boolean values can be converted to integers directly."
    ],
    "hint": "The boolean type is used for logical conditions in Java."
  },
  {
    "question": "Which of the following are properties of reference types in Java?",
    "correct": [
      "They store memory addresses (references) pointing to objects.",
      "They can have the value null.",
      "Classes, interfaces, and arrays are reference types."
    ],
    "incorrect": [
      "They always occupy the same amount of memory.",
      "They store their values directly on the stack."
    ],
    "hint": "Reference types point to objects stored on the heap in Java."
  },
  {
    "question": "Which of the following are valid escape sequences in Java?",
    "correct": [
      "\\n for newline",
      "\\t for tab",
      "\\\" for double quote",
      "\\' for single quote"
    ],
    "incorrect": [
      "\\s for space"
    ],
    "hint": "Escape sequences in Java allow you to include special characters in strings and character literals."
  },
  {
    "question": "Which statements about System.out.println() in Java are correct?",
    "correct": [
      "It prints the specified message to the console followed by a newline character.",
      "It can accept arguments of any data type, including objects."
    ],
    "incorrect": [
      "It requires a String parameter and cannot print other data types.",
      "It returns the number of characters printed.",
      "It can only print one value at a time."
    ],
    "hint": "System.out.println() is a method used for console output in Java."
  },
  {
    "question": "Which statements about System.out.print() in Java are correct?",
    "correct": [
      "It prints the specified message to the console without adding a newline character.",
      "Multiple System.out.print() calls will display output on the same line."
    ],
    "incorrect": [
      "It performs faster than System.out.println().",
      "It can only print String values.",
      "It automatically adds a space after printing."
    ],
    "hint": "System.out.print() differs from println() in how it handles line endings."
  },
  {
    "question": "Which of the following are true about Strings in Java?",
    "correct": [
      "Strings are immutable in Java.",
      "Strings can be created using string literals enclosed in double quotes.",
      "String objects can be concatenated using the + operator."
    ],
    "incorrect": [
      "Strings are primitive data types.",
      "String comparison using == always checks content equality."
    ],
    "hint": "String is a class in Java that represents sequences of characters."
  },
  {
    "question": "Which of the following are arithmetic operators in Java?",
    "correct": [
      "+",
      "-",
      "*",
      "%"
    ],
    "incorrect": [
      "^"
    ],
    "hint": "Arithmetic operators perform mathematical operations on numeric values."
  },
  {
    "question": "Which of the following are comparison operators in Java?",
    "correct": [
      "!=",
      ">="
    ],
    "incorrect": [
      "=>",
      "=<",
      "==="
    ],
    "hint": "Comparison operators compare two values and return a boolean result."
  },
  {
    "question": "Which of the following are logical operators in Java?",
    "correct": [
      "&&",
      "||",
      "!"
    ],
    "incorrect": [
      "AND",
      "&|"
    ],
    "hint": "Logical operators work with boolean values and are used to form complex conditions."
  },
  {
    "question": "Which statements about increment/decrement operators in Java are correct?",
    "correct": [
      "++ increments a variable by 1.",
      "-- decrements a variable by 1.",
      "The prefix form (++x) increments the value before it is used in an expression.",
      "The postfix form (x++) increments the value after it is used in an expression."
    ],
    "incorrect": [
      "Increment/decrement operators can only be used with integers."
    ],
    "hint": "Increment and decrement operators provide shorthand notation for adding or subtracting 1."
  },
  {
    "question": "Which statements about expressions in Java are correct?",
    "correct": [
      "Expressions evaluate to a single value.",
      "Expressions can be part of a statement."
    ],
    "incorrect": [
      "All expressions must end with a semicolon.",
      "Expressions always change the value of a variable.",
      "Expressions cannot contain operators."
    ],
    "hint": "Expressions are combinations of variables, operators, and method calls that evaluate to a value."
  },
  {
    "question": "Which of the following are true about statements in Java?",
    "correct": [
      "Statements must end with a semicolon (except some complex statements).",
      "Statements execute actions in a program.",
      "Statements can include expressions."
    ],
    "incorrect": [
      "Statements always return a value.",
      "All statements must be inside a method."
    ],
    "hint": "Statements are the smallest complete units of execution in Java."
  },
  {
    "question": "Which statements about the if statement in Java are correct?",
    "correct": [
      "The condition in an if statement must evaluate to a boolean.",
      "if statements can be nested.",
      "Braces are optional when the if body contains only one statement.",
      "if statements can be used with else clauses."
    ],
    "incorrect": [
      "The condition in an if statement must be enclosed in quotes."
    ],
    "hint": "if statements are used for conditional execution of code in Java."
  },
  {
    "question": "Which statements about the else statement in Java are correct?",
    "correct": [
      "else is used with if to specify code to execute when the if condition is false.",
      "Multiple else if statements can be chained together."
    ],
    "incorrect": [
      "else can be used independently without an if statement.",
      "else requires its own condition.",
      "else always requires braces even for a single statement."
    ],
    "hint": "The else clause extends the if statement to execute a different block of code when the if condition is false."
  },
  {
    "question": "Which statements about methods in Java are correct?",
    "correct": [
      "Methods are used to define reusable blocks of code.",
      "Methods can return a value or void (no value).",
      "Methods can take parameters for input."
    ],
    "incorrect": [
      "Methods must always return a value.",
      "Java does not support method overloading."
    ],
    "hint": "Methods define behavior in Java classes."
  },
  {
    "question": "Which statements about defining methods in Java are correct?",
    "correct": [
      "Method names must start with a letter, underscore, or dollar sign.",
      "The return type must be specified before the method name.",
      "The parameter list is enclosed in parentheses.",
      "The method body is enclosed in curly braces."
    ],
    "incorrect": [
      "Methods can have multiple return types."
    ],
    "hint": "Method definition includes access modifier, return type, name, parameter list, and body."
  },
  {
    "question": "Which statements about calling methods in Java are correct?",
    "correct": [
      "Methods are called by writing the method name followed by parentheses.",
      "Arguments must match the parameters' types in the method declaration."
    ],
    "incorrect": [
      "All methods require arguments when called.",
      "Static methods must be called with the new keyword.",
      "You must specify the return type when calling a method."
    ],
    "hint": "Method calling involves the method name and providing any required arguments."
  },
  {
    "question": "Which statements about parameters and arguments in Java are correct?",
    "correct": [
      "Parameters are variables listed in the method declaration.",
      "Arguments are the actual values passed to the method when it is called.",
      "Primitive type arguments are passed by value."
    ],
    "incorrect": [
      "Parameters and arguments are the same thing.",
      "Java allows a variable number of arguments only for String parameters."
    ],
    "hint": "Parameters are placeholders in method declarations, while arguments are the actual values passed when the method is called."
  },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        System.out.println(\"Hello\" + \" World\");<br>    }<br>}</pre>",
      "correct": [
        "Hello World"
      ],
      "incorrect": [
        "HelloWorld",
        "Hello + World",
        "\"Hello World\"",
        "Compilation error: invalid concatenation"
      ],
      "hint": "The + operator concatenates strings in Java."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int a = 5;<br>        int b = 2;<br>        System.out.println(a + b);<br>    }<br>}</pre>",
      "correct": [
        "7"
      ],
      "incorrect": [
        "5 + 2",
        "52",
        "a + b",
        "Compilation error: incompatible types"
      ],
      "hint": "The + operator performs addition when used with numeric types."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        System.out.print(\"Hello \");<br>        System.out.println(\"World\");<br>    }<br>}</pre>",
      "correct": [
        "Hello World"
      ],
      "incorrect": [
        "Hello <br>World",
        "HelloWorld",
        "Hello World<br>",
        "Hello<br>World"
      ],
      "hint": "print doesn't add a newline, while println adds a newline after printing."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int x = 10;<br>        if(x > 5) {<br>            System.out.println(\"Greater than 5\");<br>        } else {<br>            System.out.println(\"Not greater than 5\");<br>        }<br>    }<br>}</pre>",
      "correct": [
        "Greater than 5"
      ],
      "incorrect": [
        "Not greater than 5",
        "No output",
        "Compilation error: missing else statement",
        "Both statements will execute"
      ],
      "hint": "The if statement executes the code block when its condition is true."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        String name = \"Java\";<br>        System.out.println(\"Hello \" + name);<br>    }<br>}</pre>",
      "correct": [
        "Hello Java"
      ],
      "incorrect": [
        "Hello name",
        "Hello \"Java\"",
        "HelloJava",
        "\"Hello Java\""
      ],
      "hint": "When a String variable is used in concatenation, its value is used."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int x = 5;<br>        int y = 3;<br>        System.out.println(x > y);<br>    }<br>}</pre>",
      "correct": [
        "true"
      ],
      "incorrect": [
        "false",
        "5 > 3",
        "1",
        "Yes"
      ],
      "hint": "Comparison operators return boolean values (true or false)."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int num = 10;<br>        num = 20;<br>        System.out.println(num);<br>    }<br>}</pre>",
      "correct": [
        "20"
      ],
      "incorrect": [
        "10",
        "10, 20",
        "Compilation error: variable already assigned",
        "30"
      ],
      "hint": "Variables can be reassigned with new values, which replace the previous value."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int x = 5;<br>        x++;<br>        System.out.println(x);<br>    }<br>}</pre>",
      "correct": [
        "6"
      ],
      "incorrect": [
        "5",
        "x++",
        "Compilation error: invalid increment",
        "7"
      ],
      "hint": "The ++ operator increments the value of a variable by 1."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        boolean isRaining = true;<br>        if(isRaining) {<br>            System.out.println(\"Take an umbrella\");<br>        } else {<br>            System.out.println(\"Enjoy the sun\");<br>        }<br>    }<br>}</pre>",
      "correct": [
        "Take an umbrella"
      ],
      "incorrect": [
        "Enjoy the sun",
        "true",
        "isRaining",
        "No output"
      ],
      "hint": "When a boolean variable is used in an if condition, its value determines which block executes."
    },
     {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int a = 10;<br>        int b = 5;<br>        System.out.println(a - b);<br>    }<br>}</pre>",
      "correct": [
        "5"
      ],
      "incorrect": [
        "-5",
        "10 - 5",
        "105",
        "15"
      ],
      "hint": "The - operator performs subtraction when used with numeric values."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        String language = \"Java\";<br>        language = \"Python\";<br>        System.out.println(language);<br>    }<br>}</pre>",
      "correct": [
        "Python"
      ],
      "incorrect": [
        "Java",
        "Java Python",
        "Compilation error: string cannot be changed",
        "JavaPython"
      ],
      "hint": "String variables can be reassigned to point to different strings."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int x = 5;<br>        int y = 5;<br>        System.out.println(x == y);<br>    }<br>}</pre>",
      "correct": [
        "true"
      ],
      "incorrect": [
        "false",
        "1",
        "5 == 5",
        "Equal"
      ],
      "hint": "The == operator compares if two primitive values are equal."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int num = 10;<br>        if(num > 20) {<br>            System.out.println(\"A\");<br>        } else if(num > 5) {<br>            System.out.println(\"B\");<br>        } else {<br>            System.out.println(\"C\");<br>        }<br>    }<br>}</pre>",
      "correct": [
        "B"
      ],
      "incorrect": [
        "A",
        "C",
        "No output",
        "A B C"
      ],
      "hint": "In an if-else if-else chain, only the first condition that is true will execute its block."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        String firstName = \"John\";<br>        String lastName = \"Doe\";<br>        System.out.println(firstName + \" \" + lastName);<br>    }<br>}</pre>",
      "correct": [
        "John Doe"
      ],
      "incorrect": [
        "JohnDoe",
        "John + Doe",
        "firstname lastname",
        "\"John Doe\""
      ],
      "hint": "String concatenation combines multiple strings into one."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        double pi = 3.14159;<br>        int wholeNumber = (int) pi;<br>        System.out.println(wholeNumber);<br>    }<br>}</pre>",
      "correct": [
        "3"
      ],
      "incorrect": [
        "3.14159",
        "3.0",
        "3.14",
        "Compilation error: invalid cast"
      ],
      "hint": "Casting a double to an int truncates the decimal portion."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        System.out.println(\"Line 1\\nLine 2\");<br>    }<br>}</pre>",
      "correct": [
        "Line 1<br>Line 2"
      ],
      "incorrect": [
        "Line 1\\nLine 2",
        "Line 1 Line 2",
        "Line 1/nLine 2",
        "Compilation error: invalid character"
      ],
      "hint": "The \\n escape sequence represents a newline character."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int total = add(5, 3);<br>        System.out.println(total);<br>    }<br>    public static int add(int a, int b) {<br>        return a + b;<br>    }<br>}</pre>",
      "correct": [
        "8"
      ],
      "incorrect": [
        "5 + 3",
        "53",
        "No output",
        "Compilation error: method not found"
      ],
      "hint": "Methods can be called to execute a block of code and return a value."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int a = 10;<br>        a = a + 5;<br>        System.out.println(a);<br>    }<br>}</pre>",
      "correct": [
        "15"
      ],
      "incorrect": [
        "10",
        "5",
        "10 + 5",
        "a + 5"
      ],
      "hint": "The expression a = a + 5 adds 5 to the current value of a and assigns the result back to a."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int num = 7;<br>        if(num % 2 == 0) {<br>            System.out.println(\"Even\");<br>        } else {<br>            System.out.println(\"Odd\");<br>        }<br>    }<br>}</pre>",
      "correct": [
        "Odd"
      ],
      "incorrect": [
        "Even",
        "7",
        "1",
        "No output"
      ],
      "hint": "The % operator returns the remainder after division. For even numbers, num % 2 equals 0."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        boolean isHot = false;<br>        System.out.println(!isHot);<br>    }<br>}</pre>",
      "correct": [
        "true"
      ],
      "incorrect": [
        "false",
        "!false",
        "0",
        "No output"
      ],
      "hint": "The ! operator negates a boolean value."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int a = 5;<br>        int b = 2;<br>        System.out.println(a * b);<br>    }<br>}</pre>",
      "correct": [
        "10"
      ],
      "incorrect": [
        "7",
        "52",
        "5 * 2",
        "25"
      ],
      "hint": "The * operator performs multiplication when used with numeric values."
    },
    {
      "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        sayHello();<br>    }<br>    public static void sayHello() {<br>        System.out.println(\"Hello World\");<br>    }<br>}</pre>",
      "correct": [
        "Hello World"
      ],
      "incorrect": [
        "No output",
        "sayHello",
        "Compilation error: method not called properly",
        "void"
      ],
      "hint": "When a method is called, its code block is executed."
    },

    {
        "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int x = 5;<br>        System.out.println(x++);<br>        System.out.println(x);<br>    }<br>}</pre>",
        "correct": [
        "5<br>6"
        ],
        "incorrect": [
        "6<br>6",
        "5<br>5",
        "6<br>5",
        "Compilation error: invalid increment operation"
        ],
        "hint": "The postfix increment operator (x++) returns the original value and then increments it."
        },
        {
        "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        char a = 'A';<br>        char b = 'B';<br>        System.out.println(a + b);<br>    }<br>}</pre>",
        "correct": [
        "131"
        ],
        "incorrect": [
        "AB",
        "A+B",
        "Compilation error: invalid operation for char",
        "BA"
        ],
        "hint": "When chars are used with the + operator, they are converted to their integer Unicode values."
        },


        {
        "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        System.out.println(\"Hello\" + 1 + 2);<br>        System.out.println(1 + 2 + \"Hello\");<br>    }<br>}</pre>",
        "correct": [
        "Hello12<br>3Hello"
        ],
        "incorrect": [
        "Hello3<br>3Hello",
        "Hello12<br>12Hello",
        "Hello3<br>12Hello",
        "Compilation error: incompatible types"
        ],
        "hint": "The + operator is evaluated from left to right. When a string is encountered, subsequent operations are string concatenation."
        },
        {
        "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int x = 10;<br>        int y = 20;<br>        System.out.println(x > y);<br>        System.out.println(x < y);<br>    }<br>}</pre>",
        "correct": [
        "false<br>true"
        ],
        "incorrect": [
        "true<br>false",
        "10>20<br>10<20",
        "0<br>1",
        "Compilation error: incomparable types"
        ],
        "hint": "Comparison operators return boolean values (true or false)."
        },
        {
        "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int x = 5;<br>        if(x = 10) {<br>            System.out.println(\"x is 10\");<br>        } else {<br>            System.out.println(\"x is not 10\");<br>        }<br>    }<br>}</pre>",
        "correct": [
        "Compilation error: incompatible types: int cannot be converted to boolean"
        ],
        "incorrect": [
        "x is 10",
        "x is not 10",
        "Runtime error: invalid assignment",
        "No output"
        ],
        "hint": "The condition in an if statement must be a boolean expression. The = operator is for assignment, not comparison."
        },
        {
        "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        System.out.print(\"Hello \");<br>        System.out.println(\"World\");<br>        System.out.print(\"Java\");<br>    }<br>}</pre>",
        "correct": [
        "Hello World<br>Java"
        ],
        "incorrect": [
        "Hello World Java",
        "Hello<br>World<br>Java",
        "Hello WorldJava",
        "Hello <br>World<br>Java"
        ],
        "hint": "println adds a newline after printing, while print does not."
        },
        
{"question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int i = 0;<br>        while(i < 5) {<br>            System.out.print(i++);<br>        }<br>    }<br>}</pre>",
"correct": [
"01234"
],
"incorrect": [
"12345",
"1234",
"0123",
"Infinite loop"
],
"hint": "The postfix increment (i++) returns the current value before incrementing."
},
{
"question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        int a = 5;<br>        int b = 2;<br>        System.out.println(a / b);<br>        System.out.println(a % b);<br>    }<br>}</pre>",
"correct": [
"2<br>1"
],
"incorrect": [
"2.5<br>0",
"2<br>0",
"2.5<br>1",
"Compilation error: incompatible types"
],
"hint": "Division between integers results in integer division (truncation). The modulo operator (%) returns the remainder."
},
{
    "question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        byte b = 127;<br>        b++;<br>        System.out.println(b);<br>    }<br>}</pre>",
    "correct": [
    "-128"
    ],
    "incorrect": [
    "128",
    "0",
    "127",
    "Compilation error: overflow"
    ],
    "hint": "The byte data type in Java has a range from -128 to 127. When incremented beyond its maximum value, it wraps around to its minimum value."
    },


    {"question": "What would be the output of this Java code?<br><pre>public class Test {<br>    public static void main(String[] args) {<br>        String s1 = \"Hello\";<br>        String s2 = new String(\"Hello\");<br>        System.out.println(s1 == s2);<br>        System.out.println(s1.equals(s2));<br>    }<br>}</pre>",
"correct": [
"false<br>true"
],
"incorrect": [
"true<br>true",
"false<br>false",
"true<br>false",
"Compilation error: invalid comparison"
],
"hint": "The == operator compares object references, while the equals method compares the content of strings."
}
    
]